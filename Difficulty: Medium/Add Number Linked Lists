/*
class Node {
    int data;
    Node next;

    Node(int d) {
        data = d;
        next = null;
    }
}
*/

class Solution {
     
     static Node reverse(Node curr , Node prev){
         if(curr==null) return prev;
             
             Node next =curr.next;
             curr.next=prev;
             prev= curr;
             
        
         return reverse(next,curr);
     }
    
    static Node trimZeros(Node node){
        while(node!=null && node.data==0) node = node.next;
        if(node==null) return new Node(0);
        return node;
    }
    static Node addTwoLists(Node head1, Node head2) {
        
        head1 = trimZeros(head1);
        head2 = trimZeros(head2);
        
        if(head1==null) head1=new Node(0);
        if(head2==null) head2=new Node(0);
        // code here
        head1 = reverse(head1, null);
        head2= reverse(head2,null);
        
        Node curr1 = head1;
        Node curr2=head2;
        Node head = new Node(-1);
        Node tail=head;
        int sum ;
        int carry =0;
        
        //Addition
        while(curr1!=null || curr2!=null || carry!=0){
            sum = carry;
            if(curr1!=null){
                sum+=curr1.data;
                curr1=curr1.next;
            }
              if(curr2!=null){
                sum+=curr2.data;
                curr2=curr2.next;
            }
            tail.next=new Node(sum%10);
            tail=tail.next;
            carry = sum/10;
        }
        Node ans = reverse(head.next , null);
        ans = trimZeros(ans);
        return ans;
    }
}
